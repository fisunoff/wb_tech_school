package flipper

import "testing"

func TestFlip(t *testing.T) {
	type testCase struct {
		name  string
		input string
		want  string
	}

	tests := []testCase{
		{
			name:  "ASCII",
			input: "Hello, world",
			want:  "dlrow ,olleH",
		},
		{
			name:  "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞",
			input: "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!",
			want:  "!—Ä–∏–º ,—Ç–µ–≤–∏—Ä–ü",
		},
		{
			name:  "–°—Ç—Ä–æ–∫–∞ —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏ (–∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, —ç–º–æ–¥–∑–∏)",
			input: "Go-Îû≠ üöÄ",
			want:  "üöÄ Îû≠-oG",
		},
		{
			name:  "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input: "",
			want:  "",
		},
		{
			name:  "–°—Ç—Ä–æ–∫–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞",
			input: "a",
			want:  "a",
		},
		{
			name:  "–°—Ç—Ä–æ–∫–∞-–ø–∞–ª–∏–Ω–¥—Ä–æ–º",
			input: "level",
			want:  "level",
		},
		{
			name:  "–°—Ç—Ä–æ–∫–∞-–ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π",
			input: "—Ç–æ–ø–æ—Ç",
			want:  "—Ç–æ–ø–æ—Ç",
		},
		{
			name:  "–ß–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤",
			input: "abcd",
			want:  "dcba",
		},
		{
			name:  "–ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤",
			input: "abcde",
			want:  "edcba",
		},
		{
			name:  "–°–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
			input: "a\tb\n",
			want:  "\nb\ta",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			got := Flip(tc.input)
			if got != tc.want {
				t.Errorf("Flip(%s) = %s, –æ–∂–∏–¥–∞–ª–æ—Å—å %s.", tc.input, got, tc.want)
			}
		})
	}
}
